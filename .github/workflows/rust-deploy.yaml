name: (Rust) Deploy

on:
  pull_request:
    types:
      - closed # Execute only when the PR is closed
    branches:
      - main # Only for the main branch
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch from which to deploy"
        required: true
        default: "main"
      package:
        description: "Packages to deploy (empty for all)"
        required: false
        default: ""

jobs:
  deploy:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref }}

      - name: Display directory structure
        run: tree -L 2 packages

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SCW_SSH_PRIVATE_KEY }}
          SCW_HOST: ${{ vars.SCW_PUBLIC_DNS }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${SCW_HOST} >> ~/.ssh/known_hosts

      - name: Install sops
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v3.9.0/sops-v3.9.0.linux.amd64
          sudo mv sops-v3.9.0.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops

      - name: Determine packages to deploy
        id: get-packages
        run: |
          if [ "${{ github.event.inputs.package }}" == "" ]; then
            echo "Determining packages to deploy"

            packages=$(find packages/rust -name Dockerfile | grep '^packages/rust/' | cut -d'/' -f3 | sort -u | tr '\n' ' ')
          else
            packages=${{ github.event.inputs.package }}
          fi
          echo -e ">> Package to deploy: \033[0;36m$packages\033[0m"
          echo "packages=$packages" >> $GITHUB_OUTPUT

      - name: Decrypt environment variables
        if: ${{ steps.get-packages.outputs.packages != '' }}
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          packages="${{ steps.get-packages.outputs.packages }}"
          echo "Decript environment variables for packages: $packages"
          for package in $packages; do
              if [ -f "packages/rust/$package/.env.enc" ]; then
                  echo -e "\033[0;36m>> Decrypting .env.enc for package: $package\033[0m"
                  sops -d --input-type dotenv --output-type dotenv packages/rust/$package/.env.enc > packages/rust/$package/.env
              else
                  echo -e "\033[0;36m>> No .env.enc file for package: $package\033[0m"
              fi
          done

      - name: Copying environment files to server
        if: ${{ steps.get-packages.outputs.packages != '' }}
        env:
          SCW_HOST: ${{ vars.SCW_PUBLIC_DNS }}
        run: |
          packages="${{ steps.get-packages.outputs.packages }}"
          echo "Copying environment files to server for packages: $packages"
          for package in $packages; do
            if [ -f "packages/rust/$package/.env" ]; then
              echo -e "\033[0;36m>> Copying .env file for package: $package\033[0m"
              ssh root@${SCW_HOST} "mkdir -p /opt/configuration/$package"
              scp packages/rust/$package/.env root@${SCW_HOST}:/opt/configuration/$package/.env
            else
              echo -e "\033[0;36m>> No .env file for package: $package\033[0m"
            fi
          done

      - name: Deploy
        id: deploy-packages
        env:
          SCW_HOST: ${{ vars.SCW_PUBLIC_DNS }}
        run: |
          packages="${{ steps.get-packages.outputs.packages }}"

          if [ ! -z "$packages" ]; then
            echo "Deploying packages: $packages"
            for package in $packages; do

              # Get version from Cargo.toml
              version=$(grep '^version' packages/rust/$package/Cargo.toml | cut -d '"' -f 2)
              IMAGE=ghcr.io/xhermosilla/${package}:${version}
              CONTAINER=${package}

              echo -e "\033[0;36m>> Deploying docker image: ${IMAGE}\033[0m"
              echo -e "\033[0;36m-------------------------------------------------------------------------------\033[0m"

              ssh root@${SCW_HOST} "\
                docker pull ${IMAGE} && \
                docker stop ${CONTAINER} || true && \
                docker rm ${CONTAINER} -f || true && \
                docker run -d --name ${CONTAINER} --env-file /opt/configuration/${CONTAINER}/.env --network host ${IMAGE}
              "
            done
          else
            echo "No packages to deploy"
          fi
