name: (Rust) Unit tests

on:
  push:
    paths:
      - "packages/rust/**"
  pull_request:
    paths:
      - "packages/rust/**"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run tests on"
        required: true
        default: "main"
      package:
        description: "Rust package to test (leave empty to test all)"
        required: false
        default: ""

jobs:
  get-packages:
    name: Get packages to test
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref || github.ref }}

      - name: Determine packages to test
        id: get-packages
        run: |
          # Get all Rust packages if no specific package is specified
          if [ "${{ github.event.inputs.package }}" == "" ]; then
            echo "All packages will be tested."
            packages=$(ls packages/rust)
          else
            packages=${{ github.event.inputs.package }}
          fi
          packages=$(echo $packages | jq -R -c 'split(" ")')
          echo "packages=$packages" >> $GITHUB_STATE

  # unit-tests:
  #   name: Run unit tests
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       package: ${{ fromJson(needs.set-matrix.outputs.packages) }}
  #     fail-fast: false

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.inputs.branch || github.head_ref || github.ref }}

  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true

  #     - name: Run tests for ${{ matrix.package }}
  #       working-directory: packages/rust/${{ matrix.package }}
  #       run: cargo test --verbose

